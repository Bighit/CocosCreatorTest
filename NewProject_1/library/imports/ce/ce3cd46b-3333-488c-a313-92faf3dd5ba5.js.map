{"version":3,"sources":["../../../../assets/Script/assets/Script/CardBoard.js"],"names":["NUMBER_OF_REMOVALS","cc","Class","extends","Component","properties","cardCount","cardPrefab","Prefab","ctor","itemsArray","Global","cardArray","onLoad","type","url","desc","title","probability","probabilityArray","forEach","length","prob","element","push","log","cardPool","NodePool","i","createOneCard","handleItemsArray","item","cardModel","CardModel","cardId","indexOf","imageUrl","tempProb","Math","random","index","tIndex","card","size","get","instantiate","getComponent","init","parent","node","on","Node","EventType","TOUCH_END","event","checkAndClearCard"],"mappings":"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","file":"CardBoard.js","sourceRoot":"../../../../assets/Script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\nconst NUMBER_OF_REMOVALS = 3;\n\nimport { CardModel } from 'CardModel';\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n        cardCount: 0,\n        cardPrefab: cc.Prefab\n\n    },\n    ctor(){\n        this.itemsArray = Global.itemsArray;\n        this.cardArray=[];\n    },\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    onLoad() {\n        this.itemsArray = [\n            {\n            type:0,\n            url:'aa',\n            desc:'descdesc',\n            title:'title',\n            probability: 0.2,\n        },\n        {\n            type:0,\n            url:'bb',\n            desc:'descdesc',\n            title:'title',\n            probability:0.3,\n        },\n        {\n            type:0,\n            url:'cc',\n            desc:'descdesc',\n            title:'title',\n            probability:0.5,\n        }];\n        //生成概率数组\n        this.probabilityArray = [0];\n        this.itemsArray.forEach(element => {\n            var probability = this.probabilityArray[this.probabilityArray.length - 1];\n            let prob = element.probability;\n            this.probabilityArray.push(prob + probability);\n        },this);\n        cc.log(this.probabilityArray);\n        //初始化缓存池\n        this.cardPool = new cc.NodePool('Card');\n        for (let i = 0; i < this.cardCount; ++i) {\n            this.createOneCard();\n        }\n\n    },\n    handleItemsArray(item) {\n\n        var cardModel = new CardModel();\n        cardModel.cardId = this.itemsArray.indexOf(item);\n        cardModel.type = item.type;\n        cardModel.imageUrl = item.url;\n        cardModel.title = item.title;\n        cardModel.desc = item.desc;\n        return cardModel;\n    },\n    createOneCard() {\n        //随机得到cardModel\n        var tempProb = Math.random();\n        var index = 0;\n        for (let tIndex in this.probabilityArray) {\n            if (tempProb < this.probabilityArray[tIndex]) {\n                index = tIndex - 1;\n                break;\n            }\n        }\n        let item = this.itemsArray[index];\n        var cardModel = this.handleItemsArray(item);\n        //生成卡片\n        var card = null;\n        if (this.cardPool.size() > 0) {\n            card = this.cardPool.get();\n        } else {\n            card = cc.instantiate(this.cardPrefab);\n        }\n        card.getComponent('Card').init(cardModel);\n        card.parent = this.node;\n        this.cardArray.push(card);\n\n        card.on(cc.Node.EventType.TOUCH_END, function (event) {\n            cc.log(this.cardArray.indexOf(card));\n        }, this);\n    },\n    checkAndClearCard() {\n\n    }\n    // update (dt) {},\n});\n"]}